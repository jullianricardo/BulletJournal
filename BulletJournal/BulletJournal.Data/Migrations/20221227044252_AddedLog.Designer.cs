// <auto-generated />
using System;
using BulletJournal.Data.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BulletJournal.Data.Migrations
{
    [DbContext(typeof(BulletJournalContext))]
    [Migration("20221227044252_AddedLog")]
    partial class AddedLog
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BulletJournal.Data.Model.Bullet.BulletEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ParentId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Signifier")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LogId");

                    b.HasIndex("ParentId");

                    b.ToTable("Bullet", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BulletJournal.Data.Model.Calendar.CalendarEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Calendar", (string)null);
                });

            modelBuilder.Entity("BulletJournal.Data.Model.Calendar.DayEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CalendarEntityId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntriesId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("HolidayId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsHoliday")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WeekDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CalendarEntityId");

                    b.HasIndex("EntriesId");

                    b.HasIndex("HolidayId");

                    b.ToTable("Day", (string)null);
                });

            modelBuilder.Entity("BulletJournal.Data.Model.Calendar.HolidayEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Holiday", (string)null);
                });

            modelBuilder.Entity("BulletJournal.Data.Model.Collection.CollectionEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("Collection", (string)null);

                    b.HasDiscriminator<int>("Type").IsComplete(false);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BulletJournal.Data.Model.Collection.FutureLogMonthEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CollectionId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FutureLogId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.HasIndex("FutureLogId");

                    b.ToTable("FutureLogMonth", (string)null);
                });

            modelBuilder.Entity("BulletJournal.Data.Model.Collection.LogEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CollectionId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId")
                        .IsUnique()
                        .HasFilter("[CollectionId] IS NOT NULL");

                    b.ToTable("Log", (string)null);
                });

            modelBuilder.Entity("BulletJournal.Data.Model.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BulletJournal.Data.Model.IndexEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("JournalId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("JournalId")
                        .IsUnique()
                        .HasFilter("[JournalId] IS NOT NULL");

                    b.ToTable("Index", (string)null);
                });

            modelBuilder.Entity("BulletJournal.Data.Model.JournalEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Journal", (string)null);
                });

            modelBuilder.Entity("BulletJournal.Data.Model.PageEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("JournalId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("JournalId");

                    b.ToTable("Page", (string)null);
                });

            modelBuilder.Entity("BulletJournal.Data.Model.TopicEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IndexId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PageNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IndexId");

                    b.ToTable("Topic", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BulletJournal.Data.Model.Bullet.EventEntity", b =>
                {
                    b.HasBaseType("BulletJournal.Data.Model.Bullet.BulletEntity");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("BulletJournal.Data.Model.Bullet.NoteEntity", b =>
                {
                    b.HasBaseType("BulletJournal.Data.Model.Bullet.BulletEntity");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("BulletJournal.Data.Model.Bullet.TaskEntity", b =>
                {
                    b.HasBaseType("BulletJournal.Data.Model.Bullet.BulletEntity");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("BulletJournal.Data.Model.Collection.DailyLogEntity", b =>
                {
                    b.HasBaseType("BulletJournal.Data.Model.Collection.CollectionEntity");

                    b.Property<DateTime>("CurrentDay")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("BulletJournal.Data.Model.Collection.FutureLogEntity", b =>
                {
                    b.HasBaseType("BulletJournal.Data.Model.Collection.CollectionEntity");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("BulletJournal.Data.Model.Collection.MonthlyLogEntity", b =>
                {
                    b.HasBaseType("BulletJournal.Data.Model.Collection.CollectionEntity");

                    b.Property<string>("CalendarId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.HasIndex("CalendarId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("BulletJournal.Data.Model.Bullet.BulletEntity", b =>
                {
                    b.HasOne("BulletJournal.Data.Model.Collection.LogEntity", "Log")
                        .WithMany("Bullets")
                        .HasForeignKey("LogId");

                    b.HasOne("BulletJournal.Data.Model.Bullet.BulletEntity", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Log");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("BulletJournal.Data.Model.Calendar.DayEntity", b =>
                {
                    b.HasOne("BulletJournal.Data.Model.Calendar.CalendarEntity", null)
                        .WithMany("Days")
                        .HasForeignKey("CalendarEntityId");

                    b.HasOne("BulletJournal.Data.Model.Collection.CollectionEntity", "Entries")
                        .WithMany()
                        .HasForeignKey("EntriesId");

                    b.HasOne("BulletJournal.Data.Model.Calendar.HolidayEntity", "Holiday")
                        .WithMany()
                        .HasForeignKey("HolidayId");

                    b.Navigation("Entries");

                    b.Navigation("Holiday");
                });

            modelBuilder.Entity("BulletJournal.Data.Model.Collection.CollectionEntity", b =>
                {
                    b.HasOne("BulletJournal.Data.Model.PageEntity", "Page")
                        .WithMany("Collections")
                        .HasForeignKey("PageId");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("BulletJournal.Data.Model.Collection.FutureLogMonthEntity", b =>
                {
                    b.HasOne("BulletJournal.Data.Model.Collection.CollectionEntity", "Collection")
                        .WithMany()
                        .HasForeignKey("CollectionId");

                    b.HasOne("BulletJournal.Data.Model.Collection.FutureLogEntity", "FutureLog")
                        .WithMany("Months")
                        .HasForeignKey("FutureLogId");

                    b.Navigation("Collection");

                    b.Navigation("FutureLog");
                });

            modelBuilder.Entity("BulletJournal.Data.Model.Collection.LogEntity", b =>
                {
                    b.HasOne("BulletJournal.Data.Model.Collection.CollectionEntity", "Collection")
                        .WithOne("Log")
                        .HasForeignKey("BulletJournal.Data.Model.Collection.LogEntity", "CollectionId");

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("BulletJournal.Data.Model.IndexEntity", b =>
                {
                    b.HasOne("BulletJournal.Data.Model.JournalEntity", "Journal")
                        .WithOne("Index")
                        .HasForeignKey("BulletJournal.Data.Model.IndexEntity", "JournalId");

                    b.Navigation("Journal");
                });

            modelBuilder.Entity("BulletJournal.Data.Model.PageEntity", b =>
                {
                    b.HasOne("BulletJournal.Data.Model.JournalEntity", "Journal")
                        .WithMany("Pages")
                        .HasForeignKey("JournalId");

                    b.Navigation("Journal");
                });

            modelBuilder.Entity("BulletJournal.Data.Model.TopicEntity", b =>
                {
                    b.HasOne("BulletJournal.Data.Model.IndexEntity", "Index")
                        .WithMany("Topics")
                        .HasForeignKey("IndexId");

                    b.Navigation("Index");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BulletJournal.Data.Model.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BulletJournal.Data.Model.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BulletJournal.Data.Model.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BulletJournal.Data.Model.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BulletJournal.Data.Model.Collection.MonthlyLogEntity", b =>
                {
                    b.HasOne("BulletJournal.Data.Model.Calendar.CalendarEntity", "Calendar")
                        .WithMany()
                        .HasForeignKey("CalendarId");

                    b.Navigation("Calendar");
                });

            modelBuilder.Entity("BulletJournal.Data.Model.Calendar.CalendarEntity", b =>
                {
                    b.Navigation("Days");
                });

            modelBuilder.Entity("BulletJournal.Data.Model.Collection.CollectionEntity", b =>
                {
                    b.Navigation("Log");
                });

            modelBuilder.Entity("BulletJournal.Data.Model.Collection.LogEntity", b =>
                {
                    b.Navigation("Bullets");
                });

            modelBuilder.Entity("BulletJournal.Data.Model.IndexEntity", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("BulletJournal.Data.Model.JournalEntity", b =>
                {
                    b.Navigation("Index");

                    b.Navigation("Pages");
                });

            modelBuilder.Entity("BulletJournal.Data.Model.PageEntity", b =>
                {
                    b.Navigation("Collections");
                });

            modelBuilder.Entity("BulletJournal.Data.Model.Collection.FutureLogEntity", b =>
                {
                    b.Navigation("Months");
                });
#pragma warning restore 612, 618
        }
    }
}
